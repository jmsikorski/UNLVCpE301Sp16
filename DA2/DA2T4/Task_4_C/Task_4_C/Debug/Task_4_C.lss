
Task_4_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000e1  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000009d  00000000  00000000  00000301  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000d5  00000000  00000000  0000039e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000176  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004e  00000000  00000000  0000063a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_13>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_13>:
#include <avr/interrupt.h>

void delay();	// Delay function for 0.5 sec delay

ISR(TIMER1_OVF_vect)	// Timer 1 overflow interrupt 
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
	PORTC |= (1<<0);	// Set PORTC0 to 1, flag for Timer1 completion
  8a:	40 9a       	sbi	0x08, 0	; 8
}
  8c:	0f 90       	pop	r0
  8e:	0f be       	out	0x3f, r0	; 63
  90:	0f 90       	pop	r0
  92:	1f 90       	pop	r1
  94:	18 95       	reti

00000096 <delay>:
	return 0;
}

void delay()
{
	TCNT1 = 3035;	// Set TCNT1 for 62,501 cycles
  96:	8b ed       	ldi	r24, 0xDB	; 219
  98:	9b e0       	ldi	r25, 0x0B	; 11
  9a:	90 93 85 00 	sts	0x0085, r25
  9e:	80 93 84 00 	sts	0x0084, r24
	TCCR1A = 0;
  a2:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= (1<<CS10)|(1<<CS11);	// Set prescalar to 64
  a6:	e1 e8       	ldi	r30, 0x81	; 129
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	83 60       	ori	r24, 0x03	; 3
  ae:	80 83       	st	Z, r24
  b0:	08 95       	ret

000000b2 <main>:
	PORTC |= (1<<0);	// Set PORTC0 to 1, flag for Timer1 completion
}

int main(void)
{
	DDRB = 0xFF;	// Set PORTB to output
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;	// Set PORTC to output
  b6:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1<<5) | (1<<6);	// Set PORTD5&6 to output
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	80 66       	ori	r24, 0x60	; 96
  bc:	8a b9       	out	0x0a, r24	; 10
	PORTC |= (1<<0);	// Initialize Timer1 flag to 1
  be:	40 9a       	sbi	0x08, 0	; 8
	TIMSK1 |= (1<<TOIE1);	// Enable Timer1 interrupts
  c0:	ef e6       	ldi	r30, 0x6F	; 111
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	80 83       	st	Z, r24
	char count = 0;	// Variable for 8 bit counter
	sei();	// Enable Global Interrupts
  ca:	78 94       	sei
	DDRB = 0xFF;	// Set PORTB to output
	DDRC = 0xFF;	// Set PORTC to output
	DDRD |= (1<<5) | (1<<6);	// Set PORTD5&6 to output
	PORTC |= (1<<0);	// Initialize Timer1 flag to 1
	TIMSK1 |= (1<<TOIE1);	// Enable Timer1 interrupts
	char count = 0;	// Variable for 8 bit counter
  cc:	c0 e0       	ldi	r28, 0x00	; 0
		if((PORTC & (1<<0)) == 1)	// Check Timer1 completion flag
		{
			count++;	// Increment counter
			PORTB = count;	// Output counter to port B(bits 0-5)
			PORTC = count >> 2; // Output counter to port C(bits 6 & 7) 
			if(count%5 == 0)	// Check if count is div by 5
  ce:	dd ec       	ldi	r29, 0xCD	; 205
				PORTD ^= (1<<5);	// Toggle PORTD5
  d0:	00 e2       	ldi	r16, 0x20	; 32
			if(count%10 == 0)	// Check if count is div by 10
				PORTD ^= (1<<6);	// Toggle PORTD6
  d2:	10 e4       	ldi	r17, 0x40	; 64
	TIMSK1 |= (1<<TOIE1);	// Enable Timer1 interrupts
	char count = 0;	// Variable for 8 bit counter
	sei();	// Enable Global Interrupts
	while(1)
	{
		if((PORTC & (1<<0)) == 1)	// Check Timer1 completion flag
  d4:	40 9b       	sbis	0x08, 0	; 8
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <main+0x22>
		{
			count++;	// Increment counter
  d8:	cf 5f       	subi	r28, 0xFF	; 255
			PORTB = count;	// Output counter to port B(bits 0-5)
  da:	c5 b9       	out	0x05, r28	; 5
			PORTC = count >> 2; // Output counter to port C(bits 6 & 7) 
  dc:	8c 2f       	mov	r24, r28
  de:	86 95       	lsr	r24
  e0:	86 95       	lsr	r24
  e2:	88 b9       	out	0x08, r24	; 8
			if(count%5 == 0)	// Check if count is div by 5
  e4:	cd 9f       	mul	r28, r29
  e6:	81 2d       	mov	r24, r1
  e8:	11 24       	eor	r1, r1
  ea:	86 95       	lsr	r24
  ec:	86 95       	lsr	r24
  ee:	98 2f       	mov	r25, r24
  f0:	99 0f       	add	r25, r25
  f2:	99 0f       	add	r25, r25
  f4:	89 0f       	add	r24, r25
  f6:	c8 13       	cpse	r28, r24
  f8:	03 c0       	rjmp	.+6      	; 0x100 <main+0x4e>
				PORTD ^= (1<<5);	// Toggle PORTD5
  fa:	8b b1       	in	r24, 0x0b	; 11
  fc:	80 27       	eor	r24, r16
  fe:	8b b9       	out	0x0b, r24	; 11
			if(count%10 == 0)	// Check if count is div by 10
 100:	cd 9f       	mul	r28, r29
 102:	81 2d       	mov	r24, r1
 104:	11 24       	eor	r1, r1
 106:	86 95       	lsr	r24
 108:	86 95       	lsr	r24
 10a:	86 95       	lsr	r24
 10c:	88 0f       	add	r24, r24
 10e:	98 2f       	mov	r25, r24
 110:	99 0f       	add	r25, r25
 112:	99 0f       	add	r25, r25
 114:	89 0f       	add	r24, r25
 116:	c8 13       	cpse	r28, r24
 118:	03 c0       	rjmp	.+6      	; 0x120 <main+0x6e>
				PORTD ^= (1<<6);	// Toggle PORTD6
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	81 27       	eor	r24, r17
 11e:	8b b9       	out	0x0b, r24	; 11
			delay();	// Start Delay
 120:	0e 94 4b 00 	call	0x96	; 0x96 <delay>
			PORTC &= 0xFE;	// Clear Timer1 completion flag
 124:	40 98       	cbi	0x08, 0	; 8
 126:	d6 cf       	rjmp	.-84     	; 0xd4 <main+0x22>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
