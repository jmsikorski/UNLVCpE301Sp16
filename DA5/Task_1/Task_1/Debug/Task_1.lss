
Task_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000b4  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000074  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000ba  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000015f  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000533  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <read_speed>:
	return 0 ;
}

int read_speed()
{
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); // ADC Enable, Div factor = 128
  80:	ea e7       	ldi	r30, 0x7A	; 122
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	87 e8       	ldi	r24, 0x87	; 135
  86:	80 83       	st	Z, r24
	ADMUX = 0x00; //Use ADC0, ARef voltage ref
  88:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA |= (1<<ADSC); // Start conversion
  8c:	80 81       	ld	r24, Z
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	80 83       	st	Z, r24
	while((ADCSRA & (1<<ADIF))==0);
  92:	80 81       	ld	r24, Z
  94:	84 ff       	sbrs	r24, 4
  96:	fd cf       	rjmp	.-6      	; 0x92 <read_speed+0x12>
	return ADC;
  98:	80 91 78 00 	lds	r24, 0x0078
  9c:	90 91 79 00 	lds	r25, 0x0079
  a0:	08 95       	ret

000000a2 <main>:

int read_speed();

int main()
{
	DDRC &= 0xFE; //make PORTC0 input pin
  a2:	38 98       	cbi	0x07, 0	; 7
	DDRB |= (1<<PORTB1); // set PB1(OC1A) as output pin
  a4:	21 9a       	sbi	0x04, 1	; 4
	// enable 10 bit Fast PWM, select inverted PWM, 256 prescalar
	TCCR1A |= (1<<COM1A1) | (1<<COM1A0) | (1<<WGM10) | (1<<WGM11);
  a6:	e0 e8       	ldi	r30, 0x80	; 128
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	83 6c       	ori	r24, 0xC3	; 195
  ae:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12) | (1<<CS12);
  b0:	e1 e8       	ldi	r30, 0x81	; 129
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8c 60       	ori	r24, 0x0C	; 12
  b8:	80 83       	st	Z, r24

	while(1)
	{

		if((TIFR1 & (1<<OCF1A)) != 0)		
			OCR1A = read_speed(); 
  ba:	c8 e8       	ldi	r28, 0x88	; 136
  bc:	d0 e0       	ldi	r29, 0x00	; 0
	TCCR1B |= (1<<WGM12) | (1<<CS12);

	while(1)
	{

		if((TIFR1 & (1<<OCF1A)) != 0)		
  be:	b1 9b       	sbis	0x16, 1	; 22
  c0:	fe cf       	rjmp	.-4      	; 0xbe <main+0x1c>
			OCR1A = read_speed(); 
  c2:	0e 94 40 00 	call	0x80	; 0x80 <read_speed>
  c6:	99 83       	std	Y+1, r25	; 0x01
  c8:	88 83       	st	Y, r24
  ca:	f9 cf       	rjmp	.-14     	; 0xbe <main+0x1c>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
