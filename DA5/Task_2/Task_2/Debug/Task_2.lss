
Task_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000124  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001e3  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e5  00000000  00000000  000003f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000153  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000062c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001aa  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000080a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  78:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <read_speed>:
	return 0;
}

int read_speed()
{
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); // ADC Enable, Div factor = 128
  80:	ea e7       	ldi	r30, 0x7A	; 122
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	87 e8       	ldi	r24, 0x87	; 135
  86:	80 83       	st	Z, r24
	ADMUX = 0x00; //Use ADC0, ARef voltage ref
  88:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA |= (1<<ADSC); // Start conversion
  8c:	80 81       	ld	r24, Z
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	80 83       	st	Z, r24
	while((ADCSRA & (1<<ADIF))==0);
  92:	80 81       	ld	r24, Z
  94:	84 ff       	sbrs	r24, 4
  96:	fd cf       	rjmp	.-6      	; 0x92 <read_speed+0x12>
	return ADC;
  98:	80 91 78 00 	lds	r24, 0x0078
  9c:	90 91 79 00 	lds	r25, 0x0079
  a0:	08 95       	ret

000000a2 <main>:
#include <util/delay.h>

int read_speed();
int main()
{
	DDRD = 0xFF;
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	8a b9       	out	0x0a, r24	; 10
	DDRC &= 0xFE; //make PORTC0 input pin
  a6:	38 98       	cbi	0x07, 0	; 7
	DDRB |= (1<<PORTB1); // set PB1(OC1A) as output pin
  a8:	21 9a       	sbi	0x04, 1	; 4
	// enable 10 bit Fast PWM, select inverted PWM, 1024 prescalar
	TCCR1A |= (1<<COM1A1) | (1<<COM1A0) | (1<<WGM10) | (1<<WGM11);
  aa:	e0 e8       	ldi	r30, 0x80	; 128
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	83 6c       	ori	r24, 0xC3	; 195
  b2:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12) | (1<<CS12) | (1<<CS10);
  b4:	e1 e8       	ldi	r30, 0x81	; 129
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	8d 60       	ori	r24, 0x0D	; 13
  bc:	80 83       	st	Z, r24

	while(1)
	{
		if((TIFR1 & (1<<OCF1A)) != 0)
			OCR1A = read_speed();
  be:	c8 e8       	ldi	r28, 0x88	; 136
  c0:	d0 e0       	ldi	r29, 0x00	; 0

		if ((PINB&0x02) != 0x00)
		{
			PORTD = 0X66;
  c2:	0f 2e       	mov	r0, r31
  c4:	f6 e6       	ldi	r31, 0x66	; 102
  c6:	ef 2e       	mov	r14, r31
  c8:	f0 2d       	mov	r31, r0
			_delay_ms(2);
			PORTD = 0xCC;
  ca:	0f 2e       	mov	r0, r31
  cc:	fc ec       	ldi	r31, 0xCC	; 204
  ce:	ff 2e       	mov	r15, r31
  d0:	f0 2d       	mov	r31, r0
			_delay_ms(2);
			PORTD = 0x99;
  d2:	09 e9       	ldi	r16, 0x99	; 153
			_delay_ms(2);
			PORTD = 0x33;
  d4:	13 e3       	ldi	r17, 0x33	; 51
	TCCR1A |= (1<<COM1A1) | (1<<COM1A0) | (1<<WGM10) | (1<<WGM11);
	TCCR1B |= (1<<WGM12) | (1<<CS12) | (1<<CS10);

	while(1)
	{
		if((TIFR1 & (1<<OCF1A)) != 0)
  d6:	b1 9b       	sbis	0x16, 1	; 22
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <main+0x40>
			OCR1A = read_speed();
  da:	0e 94 40 00 	call	0x80	; 0x80 <read_speed>
  de:	99 83       	std	Y+1, r25	; 0x01
  e0:	88 83       	st	Y, r24

		if ((PINB&0x02) != 0x00)
  e2:	19 9b       	sbis	0x03, 1	; 3
  e4:	f8 cf       	rjmp	.-16     	; 0xd6 <main+0x34>
		{
			PORTD = 0X66;
  e6:	eb b8       	out	0x0b, r14	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	8f e9       	ldi	r24, 0x9F	; 159
  ea:	9f e0       	ldi	r25, 0x0F	; 15
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x4a>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x50>
  f2:	00 00       	nop
			_delay_ms(2);
			PORTD = 0xCC;
  f4:	fb b8       	out	0x0b, r15	; 11
  f6:	8f e9       	ldi	r24, 0x9F	; 159
  f8:	9f e0       	ldi	r25, 0x0F	; 15
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x58>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x5e>
 100:	00 00       	nop
			_delay_ms(2);
			PORTD = 0x99;
 102:	0b b9       	out	0x0b, r16	; 11
 104:	8f e9       	ldi	r24, 0x9F	; 159
 106:	9f e0       	ldi	r25, 0x0F	; 15
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x66>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x6c>
 10e:	00 00       	nop
			_delay_ms(2);
			PORTD = 0x33;
 110:	1b b9       	out	0x0b, r17	; 11
 112:	8f e9       	ldi	r24, 0x9F	; 159
 114:	9f e0       	ldi	r25, 0x0F	; 15
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x74>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x7a>
 11c:	00 00       	nop
 11e:	db cf       	rjmp	.-74     	; 0xd6 <main+0x34>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
