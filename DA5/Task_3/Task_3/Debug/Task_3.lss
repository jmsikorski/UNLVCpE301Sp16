
Task_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000c1  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000083  00000000  00000000  000002f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000c5  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000163  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000005d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  78:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <get_pos>:
	}
}

int get_pos()
{
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); // ADC Enable, Div factor = 128
  80:	ea e7       	ldi	r30, 0x7A	; 122
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	87 e8       	ldi	r24, 0x87	; 135
  86:	80 83       	st	Z, r24
	ADMUX = 0x00; //Use ADC0, ARef voltage ref
  88:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA |= (1<<ADSC); // Start conversion
  8c:	80 81       	ld	r24, Z
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	80 83       	st	Z, r24
	while((ADCSRA & (1<<ADIF))==0);
  92:	80 81       	ld	r24, Z
  94:	84 ff       	sbrs	r24, 4
  96:	fd cf       	rjmp	.-6      	; 0x92 <get_pos+0x12>
	return ADC;
  98:	80 91 78 00 	lds	r24, 0x0078
  9c:	90 91 79 00 	lds	r25, 0x0079
  a0:	08 95       	ret

000000a2 <main>:
#include <util/delay.h>

int get_pos();
int main()
{
	DDRC &= 0xFE; //make PORTC0 input pin
  a2:	38 98       	cbi	0x07, 0	; 7
	DDRB |= (1<<PORTB1); // set PB1(OC1A) as output pin
  a4:	21 9a       	sbi	0x04, 1	; 4
	//TOP = ICR1;
	//output compare OC1A 8 bit non inverted PWM
	//Clear OC1A on Compare Match, set OC1A at TOP
	//Fast PWM
	//ICR1 = 20000 defines 50Hz pwm
	ICR1 = 20000;
  a6:	80 e2       	ldi	r24, 0x20	; 32
  a8:	9e e4       	ldi	r25, 0x4E	; 78
  aa:	90 93 87 00 	sts	0x0087, r25
  ae:	80 93 86 00 	sts	0x0086, r24
		
	TCCR1A|=(0<<COM1A0)|(1<<COM1A1)|(0<<COM1B0)|(0<<COM1B1)|(0<<FOC1A)|(0<<FOC1B)|(1<<WGM11)|(0<<WGM10); //TCCR1A = 0x82
  b2:	e0 e8       	ldi	r30, 0x80	; 128
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	82 68       	ori	r24, 0x82	; 130
  ba:	80 83       	st	Z, r24
	TCCR1B|=(0<<ICNC1)|(0<<ICES1)|(1<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10);
  bc:	e1 e8       	ldi	r30, 0x81	; 129
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	8a 61       	ori	r24, 0x1A	; 26
  c4:	80 83       	st	Z, r24
	//start timer with prescaler 8
	int offset = 490;
	while (1)
	{
		OCR1A = (get_pos()*16)/10 + offset;
  c6:	0a e0       	ldi	r16, 0x0A	; 10
  c8:	10 e0       	ldi	r17, 0x00	; 0
  ca:	c8 e8       	ldi	r28, 0x88	; 136
  cc:	d0 e0       	ldi	r29, 0x00	; 0
  ce:	0e 94 40 00 	call	0x80	; 0x80 <get_pos>
  d2:	82 95       	swap	r24
  d4:	92 95       	swap	r25
  d6:	90 7f       	andi	r25, 0xF0	; 240
  d8:	98 27       	eor	r25, r24
  da:	80 7f       	andi	r24, 0xF0	; 240
  dc:	98 27       	eor	r25, r24
  de:	b8 01       	movw	r22, r16
  e0:	0e 94 78 00 	call	0xf0	; 0xf0 <__divmodhi4>
  e4:	cb 01       	movw	r24, r22
  e6:	86 51       	subi	r24, 0x16	; 22
  e8:	9e 4f       	sbci	r25, 0xFE	; 254
  ea:	99 83       	std	Y+1, r25	; 0x01
  ec:	88 83       	st	Y, r24
	}
  ee:	ef cf       	rjmp	.-34     	; 0xce <main+0x2c>

000000f0 <__divmodhi4>:
  f0:	97 fb       	bst	r25, 7
  f2:	07 2e       	mov	r0, r23
  f4:	16 f4       	brtc	.+4      	; 0xfa <__divmodhi4+0xa>
  f6:	00 94       	com	r0
  f8:	07 d0       	rcall	.+14     	; 0x108 <__divmodhi4_neg1>
  fa:	77 fd       	sbrc	r23, 7
  fc:	09 d0       	rcall	.+18     	; 0x110 <__divmodhi4_neg2>
  fe:	0e 94 8c 00 	call	0x118	; 0x118 <__udivmodhi4>
 102:	07 fc       	sbrc	r0, 7
 104:	05 d0       	rcall	.+10     	; 0x110 <__divmodhi4_neg2>
 106:	3e f4       	brtc	.+14     	; 0x116 <__divmodhi4_exit>

00000108 <__divmodhi4_neg1>:
 108:	90 95       	com	r25
 10a:	81 95       	neg	r24
 10c:	9f 4f       	sbci	r25, 0xFF	; 255
 10e:	08 95       	ret

00000110 <__divmodhi4_neg2>:
 110:	70 95       	com	r23
 112:	61 95       	neg	r22
 114:	7f 4f       	sbci	r23, 0xFF	; 255

00000116 <__divmodhi4_exit>:
 116:	08 95       	ret

00000118 <__udivmodhi4>:
 118:	aa 1b       	sub	r26, r26
 11a:	bb 1b       	sub	r27, r27
 11c:	51 e1       	ldi	r21, 0x11	; 17
 11e:	07 c0       	rjmp	.+14     	; 0x12e <__udivmodhi4_ep>

00000120 <__udivmodhi4_loop>:
 120:	aa 1f       	adc	r26, r26
 122:	bb 1f       	adc	r27, r27
 124:	a6 17       	cp	r26, r22
 126:	b7 07       	cpc	r27, r23
 128:	10 f0       	brcs	.+4      	; 0x12e <__udivmodhi4_ep>
 12a:	a6 1b       	sub	r26, r22
 12c:	b7 0b       	sbc	r27, r23

0000012e <__udivmodhi4_ep>:
 12e:	88 1f       	adc	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	5a 95       	dec	r21
 134:	a9 f7       	brne	.-22     	; 0x120 <__udivmodhi4_loop>
 136:	80 95       	com	r24
 138:	90 95       	com	r25
 13a:	bc 01       	movw	r22, r24
 13c:	cd 01       	movw	r24, r26
 13e:	08 95       	ret

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
