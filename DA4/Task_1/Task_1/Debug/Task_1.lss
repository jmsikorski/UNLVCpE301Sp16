
Task_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f9  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e2  00000000  00000000  0000097d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001cf  00000000  00000000  00000a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000c30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000019f  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000028c  00000000  00000000  00000df3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000107f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 4d 01 	jmp	0x29a	; 0x29a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <inttypes.h>

int main(void)
{
	uint8_t i = 0;
	DDRB |= (1<<PORTB1) | (1<<PORTB3); // set PB1(OC1A) and PB3(OC2A) for output
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8a 60       	ori	r24, 0x0A	; 10
  84:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PORTD6); // set PD6(OC0A) and PB3 for output
  86:	56 9a       	sbi	0x0a, 6	; 10
	PORTB = 0x00; // set output high -> turn all LEDs off
  88:	15 b8       	out	0x05, r1	; 5
	PORTD = 0x00; // set output high -> turn all LEDs off
  8a:	1b b8       	out	0x0b, r1	; 11
	// enable 8 bit PWM, select inverted PWM
	TCCR1A |= (1<<COM1A1) | (1<<WGM10);
  8c:	e0 e8       	ldi	r30, 0x80	; 128
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	81 68       	ori	r24, 0x81	; 129
  94:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12) | (1<<CS10);
  96:	e1 e8       	ldi	r30, 0x81	; 129
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	89 60       	ori	r24, 0x09	; 9
  9e:	80 83       	st	Z, r24
	TCCR0A |= (1<<COM0A1) | (1<<WGM01) | (1<<WGM00);
  a0:	84 b5       	in	r24, 0x24	; 36
  a2:	83 68       	ori	r24, 0x83	; 131
  a4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00);
  a6:	85 b5       	in	r24, 0x25	; 37
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	85 bd       	out	0x25, r24	; 37
	TCCR2A |= (1<<COM2A1) | (1<<WGM21) | (1<<WGM20);
  ac:	e0 eb       	ldi	r30, 0xB0	; 176
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	83 68       	ori	r24, 0x83	; 131
  b4:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS20);
  b6:	e1 eb       	ldi	r30, 0xB1	; 177
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	80 83       	st	Z, r24

	while(1)
	{
		OCR0A = 0;
		OCR1A = 0;
  c0:	e8 e8       	ldi	r30, 0x88	; 136
  c2:	f0 e0       	ldi	r31, 0x00	; 0
		OCR2A = 0;
  c4:	a3 eb       	ldi	r26, 0xB3	; 179
  c6:	b0 e0       	ldi	r27, 0x00	; 0
	TCCR2A |= (1<<COM2A1) | (1<<WGM21) | (1<<WGM20);
	TCCR2B |= (1<<CS20);

	while(1)
	{
		OCR0A = 0;
  c8:	17 bc       	out	0x27, r1	; 39
		OCR1A = 0;
  ca:	11 82       	std	Z+1, r1	; 0x01
  cc:	10 82       	st	Z, r1
		OCR2A = 0;
  ce:	1c 92       	st	X, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	81 e1       	ldi	r24, 0x11	; 17
  d4:	9a e7       	ldi	r25, 0x7A	; 122
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x56>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x60>
  e0:	00 00       	nop

		_delay_ms(5000);
		/* dimm LED on */
		for (i=0; i<255; i++) 
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	cf e1       	ldi	r28, 0x1F	; 31
  e6:	de e4       	ldi	r29, 0x4E	; 78
  e8:	21 97       	sbiw	r28, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x68>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x6e>
  ee:	00 00       	nop
		{
			_delay_ms(10);
			OCR2A = i; // RED
  f0:	8c 93       	st	X, r24
		OCR1A = 0;
		OCR2A = 0;

		_delay_ms(5000);
		/* dimm LED on */
		for (i=0; i<255; i++) 
  f2:	8f 5f       	subi	r24, 0xFF	; 255
  f4:	8f 3f       	cpi	r24, 0xFF	; 255
  f6:	b1 f7       	brne	.-20     	; 0xe4 <main+0x64>
  f8:	df ef       	ldi	r29, 0xFF	; 255
  fa:	23 ed       	ldi	r18, 0xD3	; 211
  fc:	80 e3       	ldi	r24, 0x30	; 48
  fe:	d1 50       	subi	r29, 0x01	; 1
 100:	20 40       	sbci	r18, 0x00	; 0
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x7e>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x88>
 108:	00 00       	nop
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	cf e1       	ldi	r28, 0x1F	; 31
 10e:	de e4       	ldi	r29, 0x4E	; 78
 110:	21 97       	sbiw	r28, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0x90>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x96>
 116:	00 00       	nop
		} // RGB = 100 (RED)
		_delay_ms(2000); 
		for (i=0; i<255; i++)
		{
			_delay_ms(10);
			OCR2A = -i; // RED
 118:	8c 93       	st	X, r24
 11a:	81 50       	subi	r24, 0x01	; 1
		{
			_delay_ms(10);
			OCR2A = i; // RED
		} // RGB = 100 (RED)
		_delay_ms(2000); 
		for (i=0; i<255; i++)
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	b1 f7       	brne	.-20     	; 0x10c <main+0x8c>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	cf e1       	ldi	r28, 0x1F	; 31
 124:	de e4       	ldi	r29, 0x4E	; 78
 126:	21 97       	sbiw	r28, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0xa6>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0xac>
 12c:	00 00       	nop
			OCR2A = -i; // RED
		}
		for (i=0; i<255; i++) 
		{
			_delay_ms(10);
			OCR1AL = i; // BLUE
 12e:	80 83       	st	Z, r24
		for (i=0; i<255; i++)
		{
			_delay_ms(10);
			OCR2A = -i; // RED
		}
		for (i=0; i<255; i++) 
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	8f 3f       	cpi	r24, 0xFF	; 255
 134:	b1 f7       	brne	.-20     	; 0x122 <main+0xa2>
 136:	df ef       	ldi	r29, 0xFF	; 255
 138:	23 ed       	ldi	r18, 0xD3	; 211
 13a:	80 e3       	ldi	r24, 0x30	; 48
 13c:	d1 50       	subi	r29, 0x01	; 1
 13e:	20 40       	sbci	r18, 0x00	; 0
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0xbc>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0xc6>
 146:	00 00       	nop
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	cf e1       	ldi	r28, 0x1F	; 31
 14c:	de e4       	ldi	r29, 0x4E	; 78
 14e:	21 97       	sbiw	r28, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <main+0xce>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0xd4>
 154:	00 00       	nop
		} // RGB = 001 (BLUE)
		_delay_ms(2000);
		for (i=0; i<255; i++)
		{
			_delay_ms(10);
			OCR1AL = -i; // BLUE
 156:	80 83       	st	Z, r24
 158:	81 50       	subi	r24, 0x01	; 1
		{
			_delay_ms(10);
			OCR1AL = i; // BLUE
		} // RGB = 001 (BLUE)
		_delay_ms(2000);
		for (i=0; i<255; i++)
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	b1 f7       	brne	.-20     	; 0x14a <main+0xca>
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	cf e1       	ldi	r28, 0x1F	; 31
 162:	de e4       	ldi	r29, 0x4E	; 78
 164:	21 97       	sbiw	r28, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0xe4>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0xea>
 16a:	00 00       	nop
			OCR1AL = -i; // BLUE
		}
		for (i=0; i<255; i++)
		{
			_delay_ms(10);
			OCR0A = i; // GREEN
 16c:	87 bd       	out	0x27, r24	; 39
		for (i=0; i<255; i++)
		{
			_delay_ms(10);
			OCR1AL = -i; // BLUE
		}
		for (i=0; i<255; i++)
 16e:	8f 5f       	subi	r24, 0xFF	; 255
 170:	8f 3f       	cpi	r24, 0xFF	; 255
 172:	b1 f7       	brne	.-20     	; 0x160 <main+0xe0>
 174:	df ef       	ldi	r29, 0xFF	; 255
 176:	23 ed       	ldi	r18, 0xD3	; 211
 178:	80 e3       	ldi	r24, 0x30	; 48
 17a:	d1 50       	subi	r29, 0x01	; 1
 17c:	20 40       	sbci	r18, 0x00	; 0
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <main+0xfa>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x104>
 184:	00 00       	nop
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	cf e1       	ldi	r28, 0x1F	; 31
 18a:	de e4       	ldi	r29, 0x4E	; 78
 18c:	21 97       	sbiw	r28, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <main+0x10c>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x112>
 192:	00 00       	nop
		} // RGB = 010 (GREEN)
		_delay_ms(2000);
		for (i=0; i<255; i++)
		{
			_delay_ms(10);
			OCR0A = -i; // GREEN
 194:	87 bd       	out	0x27, r24	; 39
 196:	81 50       	subi	r24, 0x01	; 1
		{
			_delay_ms(10);
			OCR0A = i; // GREEN
		} // RGB = 010 (GREEN)
		_delay_ms(2000);
		for (i=0; i<255; i++)
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	b1 f7       	brne	.-20     	; 0x188 <main+0x108>
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	cf e1       	ldi	r28, 0x1F	; 31
 1a0:	de e4       	ldi	r29, 0x4E	; 78
 1a2:	21 97       	sbiw	r28, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0x122>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x128>
 1a8:	00 00       	nop
			OCR0A = -i; // GREEN
		}
		for (i=0; i<255; i++)
		{
			_delay_ms(10);
			OCR1AL = i; // BLUE
 1aa:	80 83       	st	Z, r24
			OCR2A = i; // RED
 1ac:	8c 93       	st	X, r24
			OCR0A = i; // GREEN
 1ae:	87 bd       	out	0x27, r24	; 39
		for (i=0; i<255; i++)
		{
			_delay_ms(10);
			OCR0A = -i; // GREEN
		}
		for (i=0; i<255; i++)
 1b0:	8f 5f       	subi	r24, 0xFF	; 255
 1b2:	8f 3f       	cpi	r24, 0xFF	; 255
 1b4:	a1 f7       	brne	.-24     	; 0x19e <main+0x11e>
 1b6:	df ef       	ldi	r29, 0xFF	; 255
 1b8:	23 ed       	ldi	r18, 0xD3	; 211
 1ba:	80 e3       	ldi	r24, 0x30	; 48
 1bc:	d1 50       	subi	r29, 0x01	; 1
 1be:	20 40       	sbci	r18, 0x00	; 0
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x13c>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x146>
 1c6:	00 00       	nop
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	cf e1       	ldi	r28, 0x1F	; 31
 1cc:	de e4       	ldi	r29, 0x4E	; 78
 1ce:	21 97       	sbiw	r28, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0x14e>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0x154>
 1d4:	00 00       	nop
		} // RGB = 111 (WHITE)
		_delay_ms(2000);
		for (i=0; i<255; i++)
		{
			_delay_ms(10);
			OCR1AL = -i; // BLUE
 1d6:	80 83       	st	Z, r24
 1d8:	81 50       	subi	r24, 0x01	; 1
			OCR1AL = i; // BLUE
			OCR2A = i; // RED
			OCR0A = i; // GREEN
		} // RGB = 111 (WHITE)
		_delay_ms(2000);
		for (i=0; i<255; i++)
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	b1 f7       	brne	.-20     	; 0x1ca <main+0x14a>
 1de:	df ef       	ldi	r29, 0xFF	; 255
 1e0:	23 ed       	ldi	r18, 0xD3	; 211
 1e2:	80 e3       	ldi	r24, 0x30	; 48
 1e4:	d1 50       	subi	r29, 0x01	; 1
 1e6:	20 40       	sbci	r18, 0x00	; 0
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <main+0x164>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0x16e>
 1ee:	00 00       	nop
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	cf e1       	ldi	r28, 0x1F	; 31
 1f4:	de e4       	ldi	r29, 0x4E	; 78
 1f6:	21 97       	sbiw	r28, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <main+0x176>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x17c>
 1fc:	00 00       	nop
		} // RGB = 110 (YELLOW)
		_delay_ms(2000);
		for (i=0; i<255; i++)
		{
			_delay_ms(10);
			OCR0A = -i; // GREEN
 1fe:	87 bd       	out	0x27, r24	; 39
 200:	81 50       	subi	r24, 0x01	; 1
		{
			_delay_ms(10);
			OCR1AL = -i; // BLUE
		} // RGB = 110 (YELLOW)
		_delay_ms(2000);
		for (i=0; i<255; i++)
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	b1 f7       	brne	.-20     	; 0x1f2 <main+0x172>
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	cf e1       	ldi	r28, 0x1F	; 31
 20a:	de e4       	ldi	r29, 0x4E	; 78
 20c:	21 97       	sbiw	r28, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <main+0x18c>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0x192>
 212:	00 00       	nop
			OCR0A = -i; // GREEN
		} // RGB = 100 (RED)
		for (i=0; i<255; i++)
		{
			_delay_ms(10);
			OCR1AL = i; // BLUE
 214:	80 83       	st	Z, r24
		for (i=0; i<255; i++)
		{
			_delay_ms(10);
			OCR0A = -i; // GREEN
		} // RGB = 100 (RED)
		for (i=0; i<255; i++)
 216:	8f 5f       	subi	r24, 0xFF	; 255
 218:	8f 3f       	cpi	r24, 0xFF	; 255
 21a:	b1 f7       	brne	.-20     	; 0x208 <main+0x188>
 21c:	df ef       	ldi	r29, 0xFF	; 255
 21e:	23 ed       	ldi	r18, 0xD3	; 211
 220:	80 e3       	ldi	r24, 0x30	; 48
 222:	d1 50       	subi	r29, 0x01	; 1
 224:	20 40       	sbci	r18, 0x00	; 0
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <main+0x1a2>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0x1ac>
 22c:	00 00       	nop
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	cf e1       	ldi	r28, 0x1F	; 31
 232:	de e4       	ldi	r29, 0x4E	; 78
 234:	21 97       	sbiw	r28, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <main+0x1b4>
 238:	00 c0       	rjmp	.+0      	; 0x23a <main+0x1ba>
 23a:	00 00       	nop
		} // RGB = 101 (MAGENTA)
		_delay_ms(2000);
		for (i=0; i<255; i++)
		{
			_delay_ms(10);
			OCR2A = -i; // RED
 23c:	8c 93       	st	X, r24
 23e:	81 50       	subi	r24, 0x01	; 1
		{
			_delay_ms(10);
			OCR1AL = i; // BLUE
		} // RGB = 101 (MAGENTA)
		_delay_ms(2000);
		for (i=0; i<255; i++)
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	b1 f7       	brne	.-20     	; 0x230 <main+0x1b0>
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	cf e1       	ldi	r28, 0x1F	; 31
 248:	de e4       	ldi	r29, 0x4E	; 78
 24a:	21 97       	sbiw	r28, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <main+0x1ca>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <main+0x1d0>
 250:	00 00       	nop
			OCR2A = -i; // RED
		} // RGB = 001 (BLUE)
		for (i=0; i<255; i++)
		{
			_delay_ms(10);
			OCR0A = i; // GREEN
 252:	87 bd       	out	0x27, r24	; 39
		for (i=0; i<255; i++)
		{
			_delay_ms(10);
			OCR2A = -i; // RED
		} // RGB = 001 (BLUE)
		for (i=0; i<255; i++)
 254:	8f 5f       	subi	r24, 0xFF	; 255
 256:	8f 3f       	cpi	r24, 0xFF	; 255
 258:	b1 f7       	brne	.-20     	; 0x246 <main+0x1c6>
 25a:	df ef       	ldi	r29, 0xFF	; 255
 25c:	23 ed       	ldi	r18, 0xD3	; 211
 25e:	80 e3       	ldi	r24, 0x30	; 48
 260:	d1 50       	subi	r29, 0x01	; 1
 262:	20 40       	sbci	r18, 0x00	; 0
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <main+0x1e0>
 268:	00 c0       	rjmp	.+0      	; 0x26a <main+0x1ea>
 26a:	00 00       	nop
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	cf e1       	ldi	r28, 0x1F	; 31
 270:	de e4       	ldi	r29, 0x4E	; 78
 272:	21 97       	sbiw	r28, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <main+0x1f2>
 276:	00 c0       	rjmp	.+0      	; 0x278 <main+0x1f8>
 278:	00 00       	nop
		} // RGB = 011 (CYAN)
		_delay_ms(2000);
		for (i=0; i<255; i++)
		{
			_delay_ms(10);
			OCR1AL = -i; // BLUE
 27a:	80 83       	st	Z, r24
 27c:	81 50       	subi	r24, 0x01	; 1
		{
			_delay_ms(10);
			OCR0A = i; // GREEN
		} // RGB = 011 (CYAN)
		_delay_ms(2000);
		for (i=0; i<255; i++)
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	b1 f7       	brne	.-20     	; 0x26e <main+0x1ee>
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	cf e1       	ldi	r28, 0x1F	; 31
 286:	de e4       	ldi	r29, 0x4E	; 78
 288:	21 97       	sbiw	r28, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <main+0x208>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <main+0x20e>
 28e:	00 00       	nop
			OCR1AL = -i; // BLUE
		} // RGB = 010 (GREEN)
		for (i=0; i<255; i++) 
		{
			_delay_ms(10);
			OCR0A = -i; // GREEN
 290:	87 bd       	out	0x27, r24	; 39
 292:	81 50       	subi	r24, 0x01	; 1
		for (i=0; i<255; i++)
		{
			_delay_ms(10);
			OCR1AL = -i; // BLUE
		} // RGB = 010 (GREEN)
		for (i=0; i<255; i++) 
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	b1 f7       	brne	.-20     	; 0x284 <main+0x204>
 298:	17 cf       	rjmp	.-466    	; 0xc8 <main+0x48>

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
